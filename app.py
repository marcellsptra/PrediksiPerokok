# -*- coding: utf-8 -*-
"""aplikasikonsentrasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GJQohAjcL-Vg85gMQz2l5W0G3Wg9MW6I

#IMPORT LIBRARY DAN DATASET
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, ConfusionMatrixDisplay

data = pd.read_csv('/sample_data/smoking.csv', delimiter=';')

"""#PRE-PROCESSING DATA

"""

data.shape

data.head()

data.isnull().sum().sum()

data = data.dropna()

data.head()

data.info()

data.describe()

data.duplicated().sum()

data=data.dropna()

for col in data.columns:
    print(f"{col}: {data[col].unique()[:5]}")
yn_cols = ['oral', 'dental_caries', 'tartar']
for col in yn_cols:
    data[col] = data[col].map({'Y': 1, 'N': 0})

# Konversi gender M/F menjadi 1/0
data['gender'] = data['gender'].map({'M': 1, 'F': 0})

for col in data.columns:
    try:
        data[col].astype(float)
    except:
        print(f"Kolom '{col}' tidak bisa dikonversi ke float")

import re
def clean_float(val):
    if isinstance(val, str):
        # Ambil hanya bagian angka desimal pertama yang valid
        match = re.match(r'^(\d+(?:\.\d+){0,1})', val)
        return float(match.group(1)) if match else None
    return val

cols_to_clean = [
    'waist(cm)', 'eyesight(left)', 'eyesight(right)',
    'hearing(left)', 'hearing(right)', 'systolic',
    'relaxation', 'fasting_blood_sugar', 'Cholesterol',
    'triglyceride', 'HDL', 'LDL', 'hemoglobin',
    'serum_creatinine', 'AST', 'ALT', 'Gtp'
]

# Terapkan fungsi pembersih
for col in cols_to_clean:
    data[col] = data[col].apply(clean_float)

data = data.drop(columns=["ID"])

le = LabelEncoder()
data['gender'] = le.fit_transform(data['gender'])  # F = 0, M = 1

"""#FITUR DAN TARGET"""

X = data.drop(columns=['smoking'])
Y = data['smoking']

print("\nHeatmap Korelasi antar Fitur:")
plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True, cmap="coolwarm", fmt=".2f", annot_kws={"size": 8})
plt.title("Heatmap Korelasi antar Fitur")
plt.tight_layout()
plt.show()

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=42)

"""#NORMALISASI DATA"""

scaler= StandardScaler()
X_train= scaler.fit_transform(X_train)
X_test= scaler.transform(X_test)

"""#MODEL DECISION TREE"""

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, Y_train)
y_pred = dt_model.predict(X_test)
print("Training Decision Tree Classifier")

"""#MODEL RANDOM FOREST"""

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, Y_train)
y_pred = rf_model.predict(X_test)
print("Training Random Forest Classifier")

"""#EVALUASI MODEL DECSION TREE"""

Y_pred_dt = dt_model.predict(X_test)
print("\n[Decision Tree Classifier]")
print("Akurasi:", accuracy_score(Y_test, Y_pred_dt))
print("\nClassification Report:")
print(classification_report(Y_test, Y_pred_dt))
print("Confusion Matrix:")
print(confusion_matrix(Y_test, Y_pred_dt))

"""#EVALUASI MODEL RANDOM FOREST"""

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, Y_train)

# Prediksi dan evaluasi
Y_pred_rf = rf.predict(X_test)
print("Random Forest Accuracy:", accuracy_score(Y_test, Y_pred_rf))
print(classification_report(Y_test, Y_pred_rf))

"""#VISUALISASI"""

sns.countplot(data=data, x='smoking')
plt.title('Distribusi Sehat/Bukan Perokok vs Tidak Sehat/Perokok')
plt.xlabel('Status Merokok (0 = Tidak, 1 = Ya)')
plt.ylabel('Jumlah')
plt.show()

cm = confusion_matrix(Y_test, Y_pred_rf, labels=[0, 1])
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Sehat/Bukan Perokok", "Tidak Sehat/Perokok"])

disp.plot(cmap='Blues')
plt.title("Confusion Matrix - Decision Tree")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(
    data=data,
    x='waist(cm)',
    y='triglyceride',
    hue='smoking',
    palette={0: "blue", 1: "red"}
)
plt.title('Scatter Plot: Waist vs Triglyceride berdasarkan Status Merokok')
plt.xlabel('Waist (cm)')
plt.ylabel('Trigliserida')
plt.legend(title='Merokok (1=Ya, 0=Tidak)')
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(
    data=data,
    x='age',
    y='systolic',
    hue='smoking',
    palette={0: "green", 1: "orange"}
)
plt.title('Scatter Plot: Age vs Systolic Pressure berdasarkan Status Merokok')
plt.xlabel('Umur')
plt.ylabel('Tekanan Darah Sistolik')
plt.legend(title='Merokok')
plt.show()

!pip install streamlit
!pip install pyngrok
!pip install joblib

import joblib

# Pastikan Anda sudah melatih model dt_model dan scaler seperti di notebook Anda

# Simpan Decision Tree Model
joblib.dump(dt_model, 'decision_tree_model.pkl')
print("Decision Tree model saved as decision_tree_model.pkl")

# Simpan Random Forest Model (jika ingin menggunakan ini)
joblib.dump(rf_model, 'random_forest_model.pkl')
print("Random Forest model saved as random_forest_model.pkl")
expected_columns = X.columns.tolist()
# Simpan Scaler
joblib.dump(scaler, 'scaler.pkl')
print("Scaler saved as scaler.pkl")
joblib.dump(expected_columns, 'expected_columns.pkl')

import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Fungsi untuk memuat semua file yang diperlukan (model, scaler, dan nama kolom)
def load_assets():
    """
    Memuat semua aset yang diperlukan dari file .pkl.
    Fungsi ini akan menghentikan aplikasi jika ada file yang tidak ditemukan.
    """
    try:
        dt_model = joblib.load("decision_tree_model.pkl")
        rf_model = joblib.load("random_forest_model.pkl")
        scaler = joblib.load("scaler.pkl")
        expected_columns = joblib.load("expected_columns.pkl")
        return dt_model, rf_model, scaler, expected_columns
    except FileNotFoundError as e:
        st.error(f"Error: File aset tidak ditemukan! Pastikan file .pkl ada. Error: {e}")
        st.stop()

# Memuat aset di awal
dt_model, rf_model, scaler, expected_columns = load_assets()

# === UI Input ===
st.set_page_config(page_title="Prediksi Status Merokok", layout="centered")
st.title("Prediksi Status Merokok Berdasarkan Pemeriksaan Kesehatan")

# Menggunakan form agar aplikasi tidak berjalan ulang setiap kali widget diubah
with st.form(key='prediction_form'):
    st.header("Masukkan Data Pemeriksaan:")

    # Membuat dua kolom untuk layout yang lebih rapi
    col1, col2 = st.columns(2)

    with col1:
        age = st.slider("Usia", 18, 100, 40)
        height = st.number_input("Tinggi Badan (cm)", 100.0, 220.0, 170.0, format="%.1f")
        weight = st.number_input("Berat Badan (kg)", 30.0, 200.0, 65.0, format="%.1f")
        waist = st.number_input("Lingkar Pinggang (cm)", 50.0, 150.0, 80.0, format="%.1f")
        systolic = st.number_input("Tekanan Darah Sistolik", 80.0, 200.0, 120.0, format="%.1f")
        relax = st.number_input("Tekanan Darah Diastolik", 50.0, 130.0, 80.0, format="%.1f")
        fbs = st.number_input("Gula Darah Puasa", 50.0, 300.0, 100.0, format="%.1f")
        chol = st.number_input("Kolesterol", 100.0, 400.0, 200.0, format="%.1f")
        trig = st.number_input("Trigliserida", 50.0, 500.0, 150.0, format="%.1f")
        hdl = st.number_input("HDL", 10.0, 100.0, 50.0, format="%.1f")
        ldl = st.number_input("LDL", 30.0, 300.0, 100.0, format="%.1f")
        hb = st.number_input("Hemoglobin", 5.0, 20.0, 13.0, format="%.1f")

    with col2:
        crea = st.number_input("Serum Kreatinin", 0.3, 2.0, 1.0, format="%.1f")
        ast = st.number_input("AST", 5.0, 100.0, 25.0, format="%.1f")
        alt = st.number_input("ALT", 5.0, 100.0, 25.0, format="%.1f")
        gtp = st.number_input("Gtp", 5.0, 150.0, 30.0, format="%.1f")
        eyesight_l = st.number_input("Penglihatan Kiri", 0.1, 2.0, 1.0, format="%.1f")
        eyesight_r = st.number_input("Penglihatan Kanan", 0.1, 2.0, 1.0, format="%.1f")
        hearing_l = st.selectbox("Pendengaran Kiri", [1.0, 2.0], format_func=lambda x: "Baik" if x == 1.0 else "Tidak Baik")
        hearing_r = st.selectbox("Pendengaran Kanan", [1.0, 2.0], format_func=lambda x: "Baik" if x == 1.0 else "Tidak Baik")
        gender = st.selectbox("Jenis Kelamin", ["Laki-laki", "Perempuan"])
        oral = st.selectbox("Pemeriksaan Oral Normal?", ["Ya", "Tidak"])
        caries = st.selectbox("Gigi Berlubang?", ["Ya", "Tidak"])
        tartar = st.selectbox("Karang Gigi?", ["Ya", "Tidak"])

    # Tombol Prediksi di dalam form
    submit_button = st.form_submit_button(label="Prediksi Status Merokok")

# Blok ini hanya akan berjalan jika tombol di dalam form ditekan
if submit_button:
    # === Buat dictionary input ===
    input_dict = {
        'gender': 1 if gender == "Laki-laki" else 0,
        'age': age,
        'height(cm)': height,
        'weight(kg)': weight,
        'waist(cm)': waist,
        'eyesight(left)': eyesight_l,
        'eyesight(right)': eyesight_r,
        'hearing(left)': hearing_l,
        'hearing(right)': hearing_r,
        'systolic': systolic,
        'relaxation': relax,
        'fasting_blood_sugar': fbs,   # INI ADALAH PERBAIKANNYA
        'Cholesterol': chol,
        'triglyceride': trig,
        'HDL': hdl,
        'LDL': ldl,
        'hemoglobin': hb,
        'serum_creatinine': crea,
        'AST': ast,
        'ALT': alt,
        'Gtp': gtp,
        'oral': 1 if oral == "Ya" else 0,
        'dental_caries': 1 if caries == "Ya" else 0,
        'tartar': 1 if tartar == "Ya" else 0,
    }

    # Buat DataFrame
    input_data = pd.DataFrame([input_dict])

    # Debug: Cek kolom yang hilang atau berlebih
    missing = set(expected_columns) - set(input_data.columns)
    extra = set(input_data.columns) - set(expected_columns)
    if missing:
        st.error(f"‚ùå Kolom hilang dari input: {missing}")
    if extra:
        st.warning(f"‚ö† Kolom tidak dikenali (tidak dibutuhkan model): {extra}")

    # Reorder kolom sesuai dengan training
    input_data = input_data.reindex(columns=expected_columns)

    # Debug: Cek jika masih ada NaN
    if input_data.isnull().any().any():
        st.error("‚ùå Ada nilai kosong (NaN) dalam input data. Periksa input Anda.")
        st.write(input_data)
    else:
        try:
            # Scaling dan Prediksi
            scaled_input = scaler.transform(input_data)
            dt_pred = dt_model.predict(scaled_input)[0]
            rf_pred = rf_model.predict(scaled_input)[0]
            dt_prob = dt_model.predict_proba(scaled_input)[0]
            rf_prob = rf_model.predict_proba(scaled_input)[0]

            label_map = {0: "Sehat/Bukan Perokok", 1: "Tidak Sehat/Perokok"}

            st.subheader("Hasil Prediksi")
            st.write("Keteragan Hasil Prediksi")

            st.write("**Model Decision Tree**")
            st.info(f"Prediksi: **{label_map[dt_pred]}**")
            st.write(f"Keyakinan Model: Sehat/Bukan Perokok ({dt_prob[0]:.2%}), Tidak Sehat/Perokok ({dt_prob[1]:.2%})")

            st.write("---")

            st.write("**Model Random Forest (Direkomendasikan)**")
            st.info(f"Prediksi: **{label_map[rf_pred]}**")
            st.write(f"Keyakinan Model: Sehat/Bukan Perokok ({rf_prob[0]:.2%}), Tidak Sehat/Perokok ({rf_prob[1]:.2%})")

        except Exception as e:
            st.error(f"‚ùå Terjadi kesalahan saat prediksi: {e}")

# -*- coding: utf-8 -*-
"""
File ini melatih model machine learning, menyimpannya,
kemudian membuat dan menjalankan aplikasi Streamlit terpisah.
"""

# ==============================================================================
# BAGIAN 1: TRAINING DAN PENYIMPANAN MODEL
# ==============================================================================
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import joblib
import re
import os
import sys
import subprocess
import time
from pyngrok import ngrok

# --- Memuat dan Membersihkan Data ---
try:
    data = pd.read_csv('/content/sample_data/smoking.csv', delimiter=';')
except FileNotFoundError:
    print("Pastikan file 'smoking.csv' ada di folder '/content/sample_data/'.")
    # Buat data dummy jika file tidak ada agar tidak error
    data = pd.DataFrame({
        'ID': [0], 'gender': ['M'], 'age': [40], 'height(cm)': [170], 'weight(kg)': [70],
        'waist(cm)': ['85.0'], 'eyesight(left)': ['1.0'], 'eyesight(right)': ['1.0'],
        'hearing(left)': ['1.0'], 'hearing(right)': ['1.0'], 'systolic': ['120.0'],
        'relaxation': ['80.0'], 'fasting_blood_sugar': ['99.0'], 'Cholesterol': ['190.0'],
        'triglyceride': ['80.0'], 'HDL': ['55.0'], 'LDL': ['110.0'], 'hemoglobin': ['15.0'],
        'Urine_protein': [1.0], 'serum_creatinine': ['1.0'], 'AST': ['25.0'], 'ALT': ['30.0'],
        'Gtp': ['35.0'], 'oral': ['Y'], 'dental_caries': ['N'], 'tartar': ['Y'], 'smoking': [1]
    })

data = data.drop(columns=["ID"])
data = data.dropna()
data.reset_index(drop=True, inplace=True)

# --- Pembersihan Tipe Data ---
def clean_float(val):
    if isinstance(val, str):
        match = re.match(r'^(\d+(?:\.\d+){0,1})', val)
        return float(match.group(1)) if match else np.nan
    return val

cols_to_clean = [
    'waist(cm)', 'eyesight(left)', 'eyesight(right)', 'hearing(left)', 'hearing(right)',
    'systolic', 'relaxation', 'fasting_blood_sugar', 'Cholesterol', 'triglyceride',
    'HDL', 'LDL', 'hemoglobin', 'serum_creatinine', 'AST', 'ALT', 'Gtp'
]
if 'Urine_protein' in data.columns:
    cols_to_clean.append('Urine_protein')

for col in cols_to_clean:
    if col in data.columns:
        data[col] = data[col].apply(clean_float)
data = data.dropna()

# --- Encoding Fitur Kategorikal ---
data['gender'] = data['gender'].map({'M': 1, 'F': 0})
yn_cols = ['oral', 'dental_caries', 'tartar']
for col in yn_cols:
    data[col] = data[col].map({'Y': 1, 'N': 0})

# --- PERBAIKAN: Hapus kolom yang tidak ada di UI ---
if 'Urine_protein' in data.columns:
    print("Info: Menghapus kolom 'Urine_protein' karena tidak digunakan di aplikasi.")
    data = data.drop(columns=['Urine_protein'])

# --- Memisahkan Fitur dan Target ---
X = data.drop(columns=['smoking'])
Y = data['smoking']
expected_columns = X.columns.tolist()

# --- Pembagian dan Normalisasi Data ---
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# --- Training Model ---
print("Melatih model Decision Tree...")
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train_scaled, Y_train)

print("Melatih model Random Forest...")
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_scaled, Y_train)

# --- Menyimpan Aset ---
print("Menyimpan model dan aset...")
joblib.dump(dt_model, 'decision_tree_model.pkl')
joblib.dump(rf_model, 'random_forest_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
joblib.dump(expected_columns, 'expected_columns.pkl')
print("‚úÖ Semua aset berhasil disimpan.")


# ==============================================================================
# BAGIAN 2: MEMBUAT FILE APLIKASI STREAMLIT (.py)
# ==============================================================================

# Definisikan nama file untuk aplikasi Streamlit kita
NAMA_FILE_APP = "aplikasi_prediksi.py"

# Tulis semua kode aplikasi Streamlit ke dalam file .py
with open(NAMA_FILE_APP, "w") as f:
    f.write("""
import streamlit as st
import pandas as pd
import numpy as np
import joblib

# Fungsi untuk memuat semua file yang diperlukan
def load_assets():
    try:
        dt_model = joblib.load("decision_tree_model.pkl")
        rf_model = joblib.load("random_forest_model.pkl")
        scaler = joblib.load("scaler.pkl")
        expected_columns = joblib.load("expected_columns.pkl")
        return dt_model, rf_model, scaler, expected_columns
    except FileNotFoundError as e:
        st.error(f"Error: File aset tidak ditemukan! Pastikan file .pkl ada. Error: {e}")
        st.stop()

# Memuat aset di awal
dt_model, rf_model, scaler, expected_columns = load_assets()

# === UI Input ===
st.set_page_config(page_title="Prediksi Status Kesehatan", layout="centered")
st.title("Prediksi Status Kesehatan Berdasarkan Pemeriksaan Ciri-ciri Perokok")

with st.form(key='prediction_form'):
    st.header("Masukkan Data Pemeriksaan:")
    col1, col2 = st.columns(2)

    with col1:
        age = st.slider("Usia", 18, 100, 40)
        height = st.number_input("Tinggi Badan (cm)", 100.0, 220.0, 170.0, format="%.1f")
        weight = st.number_input("Berat Badan (kg)", 30.0, 200.0, 65.0, format="%.1f")
        waist = st.number_input("Lingkar Pinggang (cm)", 50.0, 150.0, 80.0, format="%.1f")
        systolic = st.number_input("Tekanan Darah Sistolik", 80.0, 200.0, 120.0, format="%.1f")
        relax = st.number_input("Tekanan Darah Diastolik", 50.0, 130.0, 80.0, format="%.1f")
        fbs = st.number_input("Gula Darah Puasa", 50.0, 300.0, 100.0, format="%.1f")
        chol = st.number_input("Kolesterol", 100.0, 400.0, 200.0, format="%.1f")
        trig = st.number_input("Trigliserida", 50.0, 500.0, 150.0, format="%.1f")
        hdl = st.number_input("HDL", 10.0, 100.0, 50.0, format="%.1f")
        ldl = st.number_input("LDL", 30.0, 300.0, 100.0, format="%.1f")
        hb = st.number_input("Hemoglobin", 5.0, 20.0, 13.0, format="%.1f")

    with col2:
        crea = st.number_input("Serum Kreatinin", 0.3, 2.0, 1.0, format="%.1f")
        ast = st.number_input("AST", 5.0, 100.0, 25.0, format="%.1f")
        alt = st.number_input("ALT", 5.0, 100.0, 25.0, format="%.1f")
        gtp = st.number_input("Gtp", 5.0, 150.0, 30.0, format="%.1f")
        eyesight_l = st.number_input("Penglihatan Kiri", 0.1, 2.0, 1.0, format="%.1f")
        eyesight_r = st.number_input("Penglihatan Kanan", 0.1, 2.0, 1.0, format="%.1f")
        hearing_l = st.selectbox("Pendengaran Kiri", [1.0, 2.0], format_func=lambda x: "Baik" if x == 1.0 else "Tidak Baik")
        hearing_r = st.selectbox("Pendengaran Kanan", [1.0, 2.0], format_func=lambda x: "Baik" if x == 1.0 else "Tidak Baik")
        gender = st.selectbox("Jenis Kelamin", ["Laki-laki", "Perempuan"])
        oral = st.selectbox("Pemeriksaan Oral Normal?", ["Ya", "Tidak"])
        caries = st.selectbox("Gigi Berlubang?", ["Ya", "Tidak"])
        tartar = st.selectbox("Karang Gigi?", ["Ya", "Tidak"])

    submit_button = st.form_submit_button(label="Prediksi Status Kesehatan")

if submit_button:
    input_dict = {
        'gender': 1 if gender == "Laki-laki" else 0, 'age': age, 'height(cm)': height,
        'weight(kg)': weight, 'waist(cm)': waist, 'eyesight(left)': eyesight_l,
        'eyesight(right)': eyesight_r, 'hearing(left)': hearing_l, 'hearing(right)': hearing_r,
        'systolic': systolic, 'relaxation': relax, 'fasting_blood_sugar': fbs,
        'Cholesterol': chol, 'triglyceride': trig, 'HDL': hdl, 'LDL': ldl,
        'hemoglobin': hb, 'serum_creatinine': crea, 'AST': ast, 'ALT': alt, 'Gtp': gtp,
        'oral': 1 if oral == "Ya" else 0, 'dental_caries': 1 if caries == "Ya" else 0,
        'tartar': 1 if tartar == "Ya" else 0,
    }

    input_data = pd.DataFrame([input_dict])
    input_data = input_data.reindex(columns=expected_columns)

    # PERBAIKAN: Pesan error yang lebih detail
    if input_data.isnull().values.any():
        nan_cols = input_data.columns[input_data.isnull().any()].tolist()
        st.error(f"**KESALAHAN: Nilai kosong (NaN) terdeteksi pada kolom: `{', '.join(nan_cols)}`**")
        st.warning("Ini terjadi karena ada kolom yang dibutuhkan model tapi tidak ada di UI. Kemungkinan besar kolom tersebut adalah 'Urine_protein'.")
        st.info(f"Kolom yang dibutuhkan model adalah: {expected_columns}")
        st.subheader("Data Input Bermasalah (setelah reindex):")
        st.dataframe(input_data)
    else:
        try:
            scaled_input = scaler.transform(input_data)
            rf_pred = rf_model.predict(scaled_input)[0]
            rf_prob = rf_model.predict_proba(scaled_input)[0]
            label_map = {0: "Sehat/ Bukan perokok", 1: "Tidak Sehat/Perokok"}

            st.subheader("Hasil Prediksi (Model Random Forest)")
            st.write("Keterangan Hasil Prediksi")
            st.info(f"Prediksi: **{label_map[rf_pred]}**")
            st.write(f"Keyakinan Model: Sehat/Bukan Perokok ({rf_prob[0]:.2%}), Tidak Sehat/Perokok ({rf_prob[1]:.2%})")
        except Exception as e:
            st.error(f"‚ùå Terjadi kesalahan saat prediksi: {e}")
""")
print(f"‚úÖ File aplikasi '{NAMA_FILE_APP}' berhasil dibuat.")


# ==============================================================================
# BAGIAN 3: MENJALANKAN APLIKASI DENGAN NGROK
# ==============================================================================
PORT_STREAMLIT = 8501
NGROK_AUTH_TOKEN = "2yzLx6HeiR0Vh9vHjPlFupm8HZR_4pnnodUiAdYbBeUKbyG2T" # Token Anda

def run_app():
    """Mengonfigurasi dan menjalankan Streamlit serta ngrok."""
    try:
        subprocess.run(f"kill -9 $(lsof -t -i:{PORT_STREAMLIT})", shell=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass

    ngrok.set_auth_token(NGROK_AUTH_TOKEN)

    print("\\nMemulai aplikasi Streamlit di latar belakang...")
    process = subprocess.Popen(['streamlit', 'run', NAMA_FILE_APP, '--server.port', str(PORT_STREAMLIT), '--server.headless', 'true'])

    print("Menunggu server Streamlit siap...")
    time.sleep(5)

    try:
        public_url = ngrok.connect(addr=str(PORT_STREAMLIT), proto="http")
        print("\\n" + "="*50)
        print(f"‚úÖ APLIKASI ANDA SUDAH AKTIF DI:")
        print(f"   {public_url}")
        print("="*50 + "\\n")
    except Exception as e:
        print(f"‚ùå Terjadi kesalahan saat membuat tunnel ngrok: {e}")
        process.kill()

# Jalankan fungsi utama
run_app()
